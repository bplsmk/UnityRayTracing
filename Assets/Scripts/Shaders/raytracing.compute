#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

static const float EPSILON = 1e-8;

int MaxBounceCount;
int frame;

//-------------------------------------
// RNG - Cosine Weighted Hemisphere Sampling
// PCG (permuted congruential generator) - www.pcg-random.org
// Huge thanks to SebLague
uint NextRandom(inout uint rngSeed)
{
    rngSeed = rngSeed * 747796405 + 2891336453;
    uint result = ((rngSeed >> ((rngSeed >> 28) + 4)) ^ rngSeed) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}

float RandomValue(inout uint rngSeed)
{
    return NextRandom(rngSeed) / 4294967295.0; // 2^32 - 1
}

float RandomValueNormalDistribution(inout uint rngSeed)
{
    float theta = 2 * 3.1415926 * RandomValue(rngSeed);
    float rho = sqrt(-2 * log(RandomValue(rngSeed)));
    return rho * cos(theta);
}

float3 RandomDirection(inout uint rngSeed)
{
    float x = RandomValueNormalDistribution(rngSeed);
    float y = RandomValueNormalDistribution(rngSeed);
    float z = RandomValueNormalDistribution(rngSeed);
    return normalize(float3(x, y, z));
}

//-------------------------------------
// MATERIALS
struct RTmaterial
{
    float emissionStrength;
    float4 emissionColor;
};

//-------------------------------------
// MESHES
struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    RTmaterial emission;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

//-------------------------------------
// RAYS
struct Ray
{
    float3 origin;
    float3 direction;
    float3 color;
};

struct HitInfo
{
    float3 position;
    float distance;
    float3 normal;
    RTmaterial emission;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.color = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

HitInfo CreateRayHit()
{
    HitInfo hitInfo;
    hitInfo.position = float3(0.0f, 0.0f, 0.0f);
    hitInfo.distance = 1.#INF;
    hitInfo.normal = float3(0.0f, 0.0f, 0.0f);
    hitInfo.emission = (RTmaterial)0;
    return hitInfo;
}

Ray CreateRayFromCamera(float2 uv)
{
    // Transform camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform direction from camera to world space then normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

//-------------------------------------
// INTERSECTS
// Algorithm from Tomas Moller & Ben Trumbore 1997
bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
    inout float t, inout float u, inout float v)
{

    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;

    float3 pvec = cross(ray.direction, edge2);

    float det = dot(edge1, pvec);

    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;

    float3 tvec = ray.origin - vert0;

    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;

    float3 qvec = cross(tvec, edge1);

    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;

    t = dot(edge2, qvec) * inv_det;

    return true;
}

void IntersectMeshObject(Ray ray, inout HitInfo hitInfo, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < hitInfo.distance)
            {
                hitInfo.distance = t;
                hitInfo.position = ray.origin + t * ray.direction;
                hitInfo.normal = normalize(cross(v1 - v0, v2 - v0));
                hitInfo.emission = meshObject.emission;
            }
        }
    }
}

//-------------------------------------
// TRACE
HitInfo Trace(Ray ray)
{
    HitInfo bestHit = CreateRayHit();
    uint count, stride, i;

    // Trace Mesh Objects
    _MeshObjects.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
    }
    
    return bestHit;
}

//-------------------------------------
// MAIN
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get dimensions of RenderTexture (ie, the screen dimensions)
    uint width, height;
    Result.GetDimensions(width, height);

    // Transforming pixel range to [-1,1])
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    // Create the ray
    Ray ray = CreateRayFromCamera(uv);

    // Creating a seed for rng
    // Credit to SabLague
    uint2 pixelCount = float2(width, height);
    uint2 pixelCoord = id.xy * pixelCount;
    uint pixelIndex = pixelCoord.y * pixelCount.x + pixelCoord.x;
    uint rngSeed = pixelIndex + frame * 719393;

    // The result
    float3 result = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < MaxBounceCount; i++)
    {
        HitInfo hitInfo = Trace(ray);
        if (hitInfo.distance < 1.#INF)
        {
            // Grab the incoming light if it bounces from an object with emission values
            float3 incomingLight = hitInfo.emission.emissionColor.gba;

            // Bounce the ray and multiply the light with object color (right now its just white)
            ray.origin = hitInfo.position + hitInfo.normal * 0.001f;
            ray.direction = normalize(hitInfo.normal + RandomDirection(rngSeed));
            result += incomingLight * ray.color;
            ray.color *= float3(1.0f, 1.0f, 1.0f);
        }
        else
        {
            // It hit nothing so delete the ray's color
            ray.color = float3(0.0f, 0.0f, 0.0f);
            break;
        }
    }
    Result[id.xy] = float4(result, 1);
}
